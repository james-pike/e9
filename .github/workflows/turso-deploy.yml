name: Deploy with Turso Change Detection

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
  schedule:
    - cron: '*/5 * * * *'  # Every 10 minutes

permissions:
  contents: write
  pull-requests: write

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.turso-check.outputs.should-deploy }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check Turso changes
        id: turso-check
        run: |
          # Create temporary folder for ts-node
          TMP_NODE_MODULES=$(mktemp -d)
          npm install ts-node typescript --prefix $TMP_NODE_MODULES --no-save
          
          # Ensure we're in the project root
          cd $GITHUB_WORKSPACE
          
          # Run Turso hash check using ts-node with ESM support
          $TMP_NODE_MODULES/node_modules/.bin/ts-node --esm --experimentalSpecifierResolution=node -e "
          import { getClasses } from './src/lib/turso.js';
          import fs from 'fs';
          import crypto from 'crypto';
          
          (async () => {
            try {
              const classes = await getClasses();
              const hash = crypto.createHash('sha256').update(JSON.stringify(classes)).digest('hex');
              const filePath = '.last-turso-hash';
              let lastHash = '';
              
              if (fs.existsSync(filePath)) {
                lastHash = fs.readFileSync(filePath, 'utf8').trim();
              }
              
              if (hash === lastHash) {
                console.log('No changes detected. Skipping deploy.');
                process.exit(78);
              }
              
              fs.writeFileSync(filePath, hash);
              console.log('Changes detected! Triggering deploy...');
            } catch (error) {
              console.error('Error checking Turso changes:', error);
              process.exit(1);
            }
          })();
          " || {
            EXIT_CODE=$?
            if [ $EXIT_CODE -eq 78 ]; then
              echo "should-deploy=false" >> $GITHUB_OUTPUT
              echo "No changes detected in Turso data"
            else
              echo "should-deploy=true" >> $GITHUB_OUTPUT
              echo "Changes detected or error occurred"
            fi
          }
          
          # If we get here, changes were detected
          if [ ! -f $GITHUB_OUTPUT ] || ! grep -q "should-deploy" $GITHUB_OUTPUT; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          fi
        env:
          PRIVATE_TURSO_DATABASE_URL: ${{ secrets.PRIVATE_TURSO_DATABASE_URL }}
          PRIVATE_TURSO_AUTH_TOKEN: ${{ secrets.PRIVATE_TURSO_AUTH_TOKEN }}
          VERCEL_WEBHOOK_URL: ${{ secrets.VERCEL_WEBHOOK_URL }}
          VERCEL_WEBHOOK_TOKEN: ${{ secrets.VERCEL_WEBHOOK_TOKEN }}

      - name: Commit hash file if changed
        if: steps.turso-check.outputs.should-deploy == 'true'
        run: |
          if [ -f .last-turso-hash ]; then
            git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git add .last-turso-hash
            git diff --staged --quiet || {
              git commit -m "Update Turso hash [skip ci]"
              git push origin HEAD:${GITHUB_REF#refs/heads/}
            }
          fi

  deploy:
    needs: check-changes
    if: needs.check-changes.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Deploy
        run: |
          echo "Deploying application..."
          # Add your actual deployment steps here
          # For example:
          # npm run deploy
          # or deploy to Vercel, Netlify, etc.
        env:
          DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}